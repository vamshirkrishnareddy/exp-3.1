const express = require('express');
const mongoose = require('mongoose');
const app = express();
app.use(express.json());

// ByteXL MongoDB connection string - set with your actual credentials
const MONGO_URI = 'mongodb://user_442sqnvm3:p442sqnvm3@bytexldb.com:5050/db_442sqnvm3';

mongoose.connect(MONGO_URI, { useNewUrlParser: true, useUnifiedTopology: true })
  .then(() => console.log('Connected to MongoDB'))
  .catch((err) => console.error('MongoDB connection error:', err));

// Product schema with nested variant
const variantSchema = new mongoose.Schema({
  color: String,
  size: String,
  stock: Number
}, { _id: true });

const productSchema = new mongoose.Schema({
  name: { type: String, required: true },
  price: { type: Number, required: true },
  category: { type: String, required: true },
  variants: [variantSchema]
});

const Product = mongoose.model('Product', productSchema);

// Get all products
app.get('/products', async (req, res) => {
  const products = await Product.find();
  res.status(200).json(products);
});

// Get products by category
app.get('/products/category/:cat', async (req, res) => {
  const products = await Product.find({ category: req.params.cat });
  res.status(200).json(products);
});

// Get products by variant color (case-insensitive)
app.get('/products/by-color/:color', async (req, res) => {
  const color = req.params.color;
  const products = await Product.find({ "variants.color": new RegExp('^' + color + '$', 'i') });
  res.status(200).json(products);
});

// Insert sample data endpoint (optionally use it once, then comment it to avoid duplicates)
app.post('/products/demo-sample', async (req, res) => {
  const prodArr = [
    {
      name: "Smartphone",
      price: 699,
      category: "Electronics",
      variants: []
    },
    {
      name: "Winter Jacket",
      price: 200,
      category: "Apparel",
      variants: [
        { color: "Black", size: "S", stock: 8 },
        { color: "Gray", size: "M", stock: 12 }
      ]
    },
    {
      name: "Running Shoes",
      price: 120,
      category: "Footwear",
      variants: [
        { color: "Red", size: "M", stock: 10 },
        { color: "Blue", size: "L", stock: 5 }
      ]
    }
  ];
  await Product.insertMany(prodArr);
  res.status(201).json({ message: "Demo sample products inserted." });
});

// Typical POST for adding any product
app.post('/products', async (req, res) => {
  try {
    const product = new Product(req.body);
    await product.save();
    res.status(201).json(product);
  } catch (err) {
    res.status(400).json({ message: err.message });
  }
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`Server running on http://localhost:${PORT}`);
});

