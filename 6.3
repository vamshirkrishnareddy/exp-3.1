const express = require('express');
const { v4: uuidv4 } = require('uuid'); // For unique _id generation
const app = express();
app.use(express.json());

// In-memory user store, simulating MongoDB collection
let users = [];

// Create users (simulates batch insert, returns user docs)
app.post('/create-users', (req, res) => {
  users = [ // Reset and create two users as per your scenario
    { _id: uuidv4(), name: 'Alice', balance: 1000, __v: 0 },
    { _id: uuidv4(), name: 'Bob', balance: 500, __v: 0 }
  ];
  res.status(201).json({ message: 'Users created.', users });
});

// Transfer endpoint
app.post('/transfer', (req, res) => {
  const { fromUserId, toUserId, amount } = req.body;
  const sender = users.find(u => u._id === fromUserId);
  const receiver = users.find(u => u._id === toUserId);

  if (!sender || !receiver) {
    return res.status(400).json({ message: 'Invalid user ID(s)' });
  }
  if (typeof amount !== 'number' || amount <= 0) {
    return res.status(400).json({ message: 'Invalid amount' });
  }
  if (sender.balance < amount) {
    return res.status(400).json({ message: 'Insufficient balance' });
  }

  sender.balance -= amount;
  receiver.balance += amount;
  res.status(200).json({
    message: `Transferred $${amount} from ${sender.name} to ${receiver.name}`,
    senderBalance: sender.balance,
    receiverBalance: receiver.balance
  });
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`Server running on http://localhost:${PORT}`);
});
